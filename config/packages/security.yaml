security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Usuario
                property: nick

    firewalls:
            api_login:
                pattern: ^/api/login
                stateless: true
                json_login:
                    check_path: /api/login_check
                    success_handler: lexik_jwt_authentication.handler.authentication_success
                    failure_handler: lexik_jwt_authentication.handler.authentication_failure
                provider: app_user_provider
            api:
                pattern: ^/api/
                stateless: true
                provider: app_user_provider
                jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: PUBLIC_ACCESS }
        - { path: ^/usuario, roles: PUBLIC_ACCESS }
        - { path: ^/api/cliente/auth/user, roles: [ ROLE_CLIENTE, ROLE_ADMIN ] }
        - { path: ^/autor, roles: PUBLIC_ACCESS }
        - { path: ^/autor/\d+, roles: PUBLIC_ACCESS }
        - { path: ^/autor/guardar, roles: ROLE_ADMIN }
        - { path: ^/autor/editar, roles: ROLE_ADMIN }
        - { path: ^/categoria, roles: PUBLIC_ACCESS }
        - { path: ^/libro/all, roles: PUBLIC_ACCESS }
        - { path: ^/libro/\d+, roles: PUBLIC_ACCESS }
        - { path: ^/libro/guardar, roles: ROLE_ADMIN }
        - { path: ^/libro/editar/\d+, roles: ROLE_ADMIN }
        - { path: ^/libro/eliminar/\d+, roles: ROLE_ADMIN }
        - { path: ^/resena/nueva, roles: ROLE_CLIENTE }
        - { path: ^/resena/listar, roles: ROLE_CLIENTE }
        - { path: ^/resena/mostrar/\d+, roles: ROLE_CLIENTE }
        - { path: ^/libro/ordenar, roles: PUBLIC_ACCESS }
        - { path: ^/resena/eliminar/\d+, roles: ROLE_CLIENTE }
        - { path: ^/resena/actualizar/\d+, roles: ROLE_CLIENTE }
        - { path: ^/cliente, roles: PUBLIC_ACCESS }
        - { path: ^/cliente/guardar, roles: PUBLIC_ACCESS }
        - { path: ^/cliente/editar/\d+, roles: ROLE_ADMIN }
        - { path: ^/resena/resenas/\d+, roles: PUBLIC_ACCESS }
        - { path: ^/resena/media-calificacion/\d+, roles: PUBLIC_ACCESS }
        - { path: ^/resena/top-libros, roles: PUBLIC_ACCESS }
        - { path: ^/libro/filtered-books, roles: PUBLIC_ACCESS }







        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
